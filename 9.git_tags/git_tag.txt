#Git - Как работать с тегами в репозитории Git на примере GitHub - Git Tags
**Git Tags** — это механизм в системе контроля версий Git, 
который позволяет помечать определённые коммиты как важные. 
Чаще всего теги используются для обозначения релизов (например, `v1.0`, `v2.1.3`).
### Зачем нужны теги?

Теги в Git используются, чтобы:
- Зафиксировать стабильную версию проекта (релиз);
- Быстро ссылаться на конкретный коммит;
- Упростить развертывание определённой версии;
- Использовать в CI/CD как триггер для сборок.
____
так вот сделали мы первую версию приложения закомитили и отправили на удаленный репозиторий
теперь как нам пометить ее как первую версию?
_____________________________________
выводит все tags, какие версии есть
```
git tag
```
чтобы дать версию коду 
```
git tag v1.0.0
```
закладка происходит в текушем commit'e
как сделать push для tags
```
git push origin v1.0.0
```
после чего в github появятся таги
_____________________________________
#как добавлять 
```
touch text3.txt
git add .
git commit -m "somethink"
git push
git tag v1.0.1
git push origin v1.0.1
```
обычно версии вешуют на основной код на main ветку
```
git checkout -b "fixing"
touch text3.txt
git add .
git commit -m "missing file"
git push origin fixing
git tag v1.1.0
git push origin v1.1.0
```
_____________________________________
если мы создали таг а он нам не нужен 
можно удалить (локально)
```
git tag -d v1.1.0
```
на удаленном репозитории
```
git push origin --delete v1.1.0
```
_____________________________________
после обьединение веток дадим таг
```
git checkout main
git pull (для синхронизации с удаленным репозиторием)
git branch -D fixing (удаление ветки)
git tag v1.2.0
git push origin v1.2.0
```
_____________________________________
как перейти на v1.0.0
все просто 
```
git checkout v1.0.0
```
проверим
```
git branch
```
чтобы вернуться обратно
```
git checkout main
```
_____________________________________
таги часто используют например для терраформа
чтобы писать его под определенную версию кода
___
Что делать если сделал несколько коммитов
и не проставил таги
для начала пишим
```
git log
```
нам нужно скопировать номер commit'a
далее:
```
git tag -a v1.5.0 87ac66d99f9e160c5edc356d0dd2580cdbccde73
```
ткроеться такое окно нажимаем i пиши в самом верну название для tag `esc` и :wq

_____________________________________
чтобы запушить сразу несколько тагов
```
git push origin --tags
```
